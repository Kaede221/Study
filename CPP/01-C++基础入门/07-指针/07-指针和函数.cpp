#include <iostream>
using namespace std;

//不知道你是否记得, 之前的函数都是值传递, 我们不能改变实参的数据
//比如下面的交换代码
void swap1(int n1, int n2) {
	int t = n1;
	n1 = n2;
	n2 = t;
}

//所以我们需要使用指针, 进而修改原来的实参数据
//这里参数给两个指针, 需要传入两个地址, 让指针直接指向地址
void swap2(int* n1, int* n2) {
	//代码其实基本不变
	//只不过需要解引用而已
	int t = *n1;
	*n1 = *n2;
	*n2 = t;
}

int main() {
	int n1 = 10;
	int n2 = 20;
	swap1(n1, n2);
	cout << "原来的交换后: \nn1 = " << n1 << endl << "n2 = " << n2 << endl;

	//指针的话, 需要传入地址
	swap2(&n1, &n2);
	//这个时候, 你就会发现, 两个数据已经成功交换了
	cout << "指针的交换后: \nn1 = " << n1 << endl << "n2 = " << n2 << endl;
	return 0;
}

/* 原理解释
我们先创建了两个变量, n1和n2, 这样内存中就有了这样的两个数据, 它们有自己的内存地址
随后, 进入函数体, swap2, 这里直接传入了对应的地址, 函数就创建了两个指针, 指向n1和n2的地址
随后, 在函数中, 先用t来接收n1的内容, 然后, 通过解引用, 让n1的内存地址的内容, 变为n2的内容
然后让n2的内存地址的内容, 变为t, 这样就实现了两个数据的交换了
随后, 退出函数, 指针和临时变量t直接失效(内存被释放)
程序结束
*/

//反正, 你只要记住, 传入的如果是地址, 那么就可以通过指针接受, 从而修改实参的值
//反之, 如果你不想要修改实参, 那么就不需要传入地址了 根据需求来就好