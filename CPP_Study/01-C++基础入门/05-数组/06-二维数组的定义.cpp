#include <iostream>
using namespace std;

//这里为了方便复用代码, 我给一个函数, 你不需要知道这个东西怎么使用, 只要知道里面的东西的意义就好
//这个函数是传入一个两行三列的数组, 然后按照矩阵的格式输出
void print_arr2(int arr1[2][3]) {
	//二维数组是一个矩阵的形式, 所以我们可以通过嵌套循环输出这个数组
	//外层循环打印行数, 内层循环打印列数
	//这样子打印出来就是一个矩阵的格式了
	for (int i = 0; i < 2; i++) {
		for (int j = 0; j < 3; j++) {
			//PS 如果你的数据长度不一样, 可以把这个空格转换为\t, 直接制表符, 看起来会好一些
			cout << arr1[i][j] << " ";
		}
		cout << endl;
	}
}

int main() {
	//其实就是多了一个列
	//定义起来也是差不多的, 就是多了一个[]而已
	//其他的都是一样的, 直接看下面的演示吧

	//比如我要创建一个两行三列的数组
	//这里建议加一个大括号, 否则你会发现下面的输出会出现问题, 输出的是一些没有来由的数据
	//给一个大括号相当于初始化数组了 全部都赋值为0了
	int arr1[2][3]{};

	//使用里面的数据也是一样的, 直接用下标就好
	arr1[0][1] = 1;
	
	//查看数据也是直接使用下标就好
	cout << arr1[0][1] << endl;

	//二维数组是一个矩阵的形式, 所以我们可以通过嵌套循环输出这个数组
	//外层循环打印行数, 内层循环打印列数
	//这样子打印出来就是一个矩阵的格式了
	// **这里我使用函数, 方便代码的复用 按住Ctrl点击函数名称, 可以查看定义
	print_arr2(arr1);

	//还有一种定义的方式, 直接让他自动识别行列
	//比如下面这个 自动就会按照顺序识别出来了
	int arr2[2][3] = { 1,2,3,4,5,6 };
	print_arr2(arr2);

	//或者, 你可以只设置行数, 不设置列数, 让他自动识别
	int arr3[][3] = { 9,8,7,6,5,4 };
	print_arr2(arr3);
	return 0;
}