#include <iostream>
using namespace std;

int main() {
	//二维数组名称, 可以查看占用的内存空间大小
	//也可以查看二维数组的首地址
	//下面这样定义看起来会方便一些
	int arr[2][3] = {
		{1,2,3},
		{4,5,6}
	};

	//int是4, 六个元素, 所以是4 * 6 = 24
	cout << "二维数组占用内存空间: " << sizeof(arr) << endl;
	//如果我改一下名称, 比如改成double, 就是48了

	//看某一行, 其实也是一样的, 直接使用行号就可以了
	cout << "一行占用的内存空间: " << sizeof(arr[0]) << endl;

	//元素的话直接就是使用两个[]就好啦
	cout << "每个元素占用的内存空间为: " << sizeof(arr[0][0]) << endl;

	//于是我们可以通过上面的东西计算出来这个数组有多少行多少列
	cout << "行数: " << sizeof(arr) / sizeof(arr[0]) << endl;
	cout << "列数: " << sizeof(arr[0]) / sizeof(arr[0][0]) << endl;

	//地址的话就是直接输出就好
	cout << "二维数组首地址为" << (int)arr << endl;
	cout << "第一行的首地址: " << (int)arr[0] << endl;
	cout << "第二行的首地址: " << (int)arr[1] << endl;
	//你可以看到刚好差了12字节 也就是三个数据, 3*4=12
	cout << "两行相差了: " << (int)arr[1] - (int)arr[0] << endl;

	//第一个元素的首地址呢?
	//记得加上取地址符, 这样才可以看到对应的地址
	cout << "第一个元素的首地址: " << (int) & arr[0][0] << endl;
	// **你应该发现了, 第一个元素的首地址, 二维数组的首地址, 第一行的首地址其实是一样的

	//眼熟吧? 和第二行的首地址其实是一个东西
	cout << "第二行第一个元素的首地址: " << (int)&arr[1][0] << endl;
	return 0;
}